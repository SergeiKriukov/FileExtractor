import Foundation
import SwiftUI
import UniformTypeIdentifiers

final class MistralAPIManager: @unchecked Sendable {
    public static let shared = MistralAPIManager()
    
    // –§–ª–∞–≥ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
     var isCancelled = false
    
     init() {}
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    public func cancelProcessing() {
        isCancelled = true
    }
    
    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private var apiKey: String {
        UserDefaults.standard.string(forKey: "mistral_api_key") ?? ""
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è OCR
    public enum OCRFileType {
        case pdf
        case image
        
        static func fromURL(_ url: URL) -> OCRFileType? {
            if url.pathExtension.lowercased() == "pdf" {
                return .pdf
            } else if ["jpg", "jpeg", "png", "tiff", "tif", "bmp", "gif"].contains(url.pathExtension.lowercased()) {
                return .image
            }
            return nil
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
    public func processOCRResult(_ extractedText: String, options: OCRProcessingOptions = OCRProcessingOptions()) -> String {
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        guard !extractedText.isEmpty else {
            return ""
        }
        
        var processedText = extractedText
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if options.handleImageLinks != .keep {
            // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Markdown-—Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let imagePattern = #"!\[(.*?)\]\((.*?)\)"#
            
            switch options.handleImageLinks {
            case .remove:
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                processedText = processedText.replacingOccurrences(
                    of: imagePattern,
                    with: "",
                    options: .regularExpression
                )
                
            case .replaceWithPlaceholder:
                // –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                processedText = processedText.replacingOccurrences(
                    of: imagePattern,
                    with: options.imagePlaceholder,
                    options: .regularExpression
                )
                
            case .keep:
                // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                break
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if options.removeEmptyLines {
            processedText = processedText.replacingOccurrences(
                of: #"\n\s*\n+"#,
                with: "\n\n",
                options: .regularExpression
            )
        }
        
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if options.trimWhitespace {
            processedText = processedText.trimmingCharacters(in: .whitespacesAndNewlines)
        }
        
        return processedText
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø—Ü–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    public func extractTextUsingMistralOCR(filePath: String, processingOptions: OCRProcessingOptions = OCRProcessingOptions()) async -> String? {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        isCancelled = false
        
        guard !apiKey.isEmpty else {
            print("‚ö†Ô∏è API –∫–ª—é—á Mistral –Ω–µ —É–∫–∞–∑–∞–Ω")
            return nil
        }
        
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        let cleanedKey = apiKey.trimmingCharacters(in: .whitespacesAndNewlines)
        
        guard let url = URL(string: "file://\(filePath)") else {
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: \(filePath)")
            return nil
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        guard let fileType = OCRFileType.fromURL(url) else {
            print("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: \(url.pathExtension)")
            return nil
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let fileName = url.lastPathComponent
        
        do {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            let fileAttributes = try FileManager.default.attributesOfItem(atPath: filePath)
            if let fileSize = fileAttributes[.size] as? Int {
                if fileSize > 50_000_000 { // 50 –ú–ë (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
                    print("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è OCR API: \(fileSize / 1_000_000) –ú–ë (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë)")
                    return nil
                }
                
                print("üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è OCR: \(fileSize / 1_000) –ö–ë")
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            let fileData = try Data(contentsOf: url)
            
            // –®–ê–ì 1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ /v1/files
            print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Mistral API...")
            
            // –°–æ–∑–¥–∞–µ–º multipart –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            let uploadURL = URL(string: "https://api.mistral.ai/v1/files")!
            var uploadRequest = URLRequest(url: uploadURL)
            uploadRequest.httpMethod = "POST"
            uploadRequest.addValue("Bearer \(cleanedKey)", forHTTPHeaderField: "Authorization")
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è multipart/form-data
            let boundary = UUID().uuidString
            uploadRequest.addValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ multipart –∑–∞–ø—Ä–æ—Å–∞
            var uploadBody = Data()
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ purpose
            uploadBody.append("--\(boundary)\r\n".data(using: .utf8)!)
            uploadBody.append("Content-Disposition: form-data; name=\"purpose\"\r\n\r\n".data(using: .utf8)!)
            uploadBody.append("ocr\r\n".data(using: .utf8)!)
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            uploadBody.append("--\(boundary)\r\n".data(using: .utf8)!)
            uploadBody.append("Content-Disposition: form-data; name=\"file\"; filename=\"\(fileName)\"\r\n".data(using: .utf8)!)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            let mimeType = fileType == .pdf ? "application/pdf" : "image/\(url.pathExtension.lowercased())"
            uploadBody.append("Content-Type: \(mimeType)\r\n\r\n".data(using: .utf8)!)
            uploadBody.append(fileData)
            uploadBody.append("\r\n".data(using: .utf8)!)
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º multipart –∑–∞–ø—Ä–æ—Å
            uploadBody.append("--\(boundary)--\r\n".data(using: .utf8)!)
            
            uploadRequest.httpBody = uploadBody
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
            let (uploadData, uploadResponse) = try await URLSession.shared.data(for: uploadRequest)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            guard let httpUploadResponse = uploadResponse as? HTTPURLResponse else {
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
                return nil
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            let uploadResponseText = String(data: uploadData, encoding: .utf8) ?? "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
            print("üìù –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: \(httpUploadResponse.statusCode)")
            print("üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: \(uploadResponseText)")
            
            if httpUploadResponse.statusCode != 200 {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: \(uploadResponseText)")
                return nil
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            guard let uploadJson = try JSONSerialization.jsonObject(with: uploadData) as? [String: Any],
                  let fileId = uploadJson["id"] as? String else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                return nil
            }
            
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, ID: \(fileId)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –®–ê–ì 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID –¥–ª—è OCR
            print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Mistral OCR API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞...")
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            let fileInfoURL = URL(string: "https://api.mistral.ai/v1/files/\(fileId)")!
            var fileInfoRequest = URLRequest(url: fileInfoURL)
            fileInfoRequest.httpMethod = "GET"
            fileInfoRequest.addValue("application/json", forHTTPHeaderField: "Accept")
            fileInfoRequest.addValue("Bearer \(cleanedKey)", forHTTPHeaderField: "Authorization")
            
            print("üìù –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: \(fileInfoURL)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            let (fileInfoData, fileInfoResponse) = try await URLSession.shared.data(for: fileInfoRequest)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            guard let httpFileInfoResponse = fileInfoResponse as? HTTPURLResponse else {
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ")
                return nil
            }
            
            let fileInfoResponseText = String(data: fileInfoData, encoding: .utf8) ?? "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
            print("üìù –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: \(httpFileInfoResponse.statusCode)")
            print("üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: \(fileInfoResponseText)")
            
            if httpFileInfoResponse.statusCode != 200 {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: \(fileInfoResponseText)")
                return nil
            }
            
            // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
            let fileURLRequest = URL(string: "https://api.mistral.ai/v1/files/\(fileId)/url?expiry=24")!
            var getURLRequest = URLRequest(url: fileURLRequest)
            getURLRequest.httpMethod = "GET"
            getURLRequest.addValue("application/json", forHTTPHeaderField: "Accept")
            getURLRequest.addValue("Bearer \(cleanedKey)", forHTTPHeaderField: "Authorization")
            
            print("üìù –ó–∞–ø—Ä–æ—Å URL –¥–ª—è —Ñ–∞–π–ª–∞: \(fileURLRequest)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞
            let (urlData, urlResponse) = try await URLSession.shared.data(for: getURLRequest)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            guard let httpURLResponse = urlResponse as? HTTPURLResponse else {
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL —Ñ–∞–π–ª–∞")
                return nil
            }
            
            let urlResponseText = String(data: urlData, encoding: .utf8) ?? "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
            print("üìù –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ API URL —Ñ–∞–π–ª–∞: \(httpURLResponse.statusCode)")
            print("üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: \(urlResponseText)")
            
            if httpURLResponse.statusCode != 200 {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL —Ñ–∞–π–ª–∞: \(urlResponseText)")
                return nil
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Ñ–∞–π–ª–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            guard let urlJson = try JSONSerialization.jsonObject(with: urlData) as? [String: Any],
                  let fileURL = urlJson["url"] as? String else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞")
                return nil
            }
            
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω URL —Ñ–∞–π–ª–∞: \(fileURL)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å OCR —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º URL
            let ocrURL = URL(string: "https://api.mistral.ai/v1/ocr")!
            var ocrRequest = URLRequest(url: ocrURL)
            ocrRequest.httpMethod = "POST"
            ocrRequest.addValue("application/json", forHTTPHeaderField: "Content-Type")
            ocrRequest.addValue("Bearer \(cleanedKey)", forHTTPHeaderField: "Authorization")
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è OCR API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL –∏ —Ç–∏–ø–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
            let ocrRequestBody: [String: Any]
            
            if fileType == .pdf {
                ocrRequestBody = [
                    "model": "mistral-ocr-latest",
                    "document": [
                        "type": "document_url",
                        "document_url": fileURL
                    ],
                    "include_image_base64": false
                ]
            } else { // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                ocrRequestBody = [
                    "model": "mistral-ocr-latest",
                    "document": [
                        "type": "image_url",
                        "image_url": fileURL
                    ],
                    "include_image_base64": false
                ]
            }
            
            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print("üìù URL –∑–∞–ø—Ä–æ—Å–∞ OCR: \(ocrURL)")
            print("üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: Content-Type: application/json, Authorization: Bearer \(cleanedKey.prefix(5))...\(cleanedKey.suffix(5))")
            print("üìù –ú–æ–¥–µ–ª—å: mistral-ocr-latest")
            print("üìù –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: \(fileType == .pdf ? "document_url" : "image_url")")
            print("üìù URL —Ñ–∞–π–ª–∞ –¥–ª—è OCR: \(fileURL)")
            
            // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            let ocrJsonData = try JSONSerialization.data(withJSONObject: ocrRequestBody)
            ocrRequest.httpBody = ocrJsonData
            
            // –°–æ–∑–¥–∞–µ–º URLSession —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            let config = URLSessionConfiguration.default
            config.timeoutIntervalForRequest = 120.0  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ OCR –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
            config.timeoutIntervalForResource = 180.0
            let session = URLSession(configuration: config)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å OCR
            let (ocrData, ocrResponse) = try await session.data(for: ocrRequest)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if isCancelled {
                print("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return nil
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            guard let httpOcrResponse = ocrResponse as? HTTPURLResponse else {
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OCR API")
                return nil
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            let ocrResponseText = String(data: ocrData, encoding: .utf8) ?? "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
            print("üìù –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ OCR API: \(httpOcrResponse.statusCode)")
            print("üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ OCR: \(ocrResponseText.prefix(200))...")
            
            switch httpOcrResponse.statusCode {
            case 200:
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                if let json = try JSONSerialization.jsonObject(with: ocrData) as? [String: Any],
                   let pages = json["pages"] as? [[String: Any]] {
                    
                    var extractedText = ""
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    for (index, page) in pages.enumerated() {
                        if let markdown = page["markdown"] as? String {
                            extractedText += "–°—Ç—Ä–∞–Ω–∏—Ü–∞ \(index + 1):\n\(markdown)\n\n"
                        }
                    }
                    
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Mistral OCR API")
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
                    if !extractedText.isEmpty {
                        return processOCRResult(extractedText, options: processingOptions)
                    }
                    return nil
                }
                
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ OCR API")
                return nil
                
            case 401:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR API (–∫–æ–¥ 401): –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á")
                print("üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: \(ocrResponseText)")
                return nil
                
            case 422:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR API (–∫–æ–¥ 422): –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
                print("üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: \(ocrResponseText)")
                return nil
                
            case 429:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR API (–∫–æ–¥ 429): –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                return nil
                
            case 520:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR API (–∫–æ–¥ 520): –°–µ—Ä–≤–µ—Ä Mistral –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                print("‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(ocrResponseText)")
                return nil
                
            default:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR API (–∫–æ–¥ \(httpOcrResponse.statusCode)): \(ocrResponseText)")
                return nil
            }
        } catch let error as NSError {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Mistral API: \(error.localizedDescription)")
            if error.domain == NSURLErrorDomain {
                switch error.code {
                case NSURLErrorTimedOut:
                    print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                case NSURLErrorNetworkConnectionLost:
                    print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
                case NSURLErrorNotConnectedToInternet:
                    print("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                default:
                    print("‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: \(error.code)")
                }
            }
            return nil
        } catch {
            print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Mistral API: \(error)")
            return nil
        }
    }
    
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    public func extractTextFromPDFUsingMistralOCR(pdfPath: String, processingOptions: OCRProcessingOptions = OCRProcessingOptions()) async -> String? {
        return await extractTextUsingMistralOCR(filePath: pdfPath, processingOptions: processingOptions)
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    public func extractTextOnlyUsingMistralOCR(filePath: String) async -> String? {
        var options = OCRProcessingOptions()
        options.handleImageLinks = .remove
        return await extractTextUsingMistralOCR(filePath: filePath, processingOptions: options)
    }
    
    // –û–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
    struct OCRProcessingOptions {
        enum ImageLinkHandling {
            case keep                 // –û—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
            case remove               // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            case replaceWithPlaceholder // –ó–∞–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        }
        
        var handleImageLinks: ImageLinkHandling = .replaceWithPlaceholder
        var imagePlaceholder: String = "[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]"
        var removeEmptyLines: Bool = true
        var trimWhitespace: Bool = true
    }
    

}
