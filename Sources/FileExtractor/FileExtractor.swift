// The Swift Programming Language
// https://docs.swift.org/swift-book

import Foundation
import SwiftUI
import PDFKit

/// –°–ª—É–∂–±–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
final class TextExtractionService: @unchecked Sendable {
    /// –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É
    static let shared = TextExtractionService()
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è OCR
    struct OCRSettings {
        /// –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ OCR –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ PDF –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
        var autoApplyOCR: Bool = UserDefaults.standard.bool(forKey: "auto_apply_on_text_extraction")
    }
    
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    struct ExtractionResult {
        let text: String?
        let method: String
        let error: Error?
        
        var isSuccess: Bool {
            // –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ nil, –Ω–µ –ø—É—Å—Ç–æ–π, –∏ –æ—à–∏–±–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
            return text != nil && !text!.isEmpty && error == nil
        }
    }
    
    var settings = OCRSettings()
    
    private init() {
        // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(updateSettings),
            name: UserDefaults.didChangeNotification,
            object: nil
        )
    }
    
    @objc private func updateSettings() {
        settings.autoApplyOCR = UserDefaults.standard.bool(forKey: "auto_apply_on_text_extraction")
    }
    
    
    // –£–±—Ä–∞—Ç—å
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ URL
    /// - Parameters:
    ///   - fileURL: URL —Ñ–∞–π–ª–∞
    ///   - fileName: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ URL)
    ///   - completion: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
//    func extractText(from fileURL: URL, fileName: String? = nil, completion: @escaping (ExtractionResult) -> Void) {
//        Task {
//            let result = await extractTextAsync(from: fileURL, fileName: fileName)
//            DispatchQueue.main.async {
//                completion(result)
//            }
//        }
//    }
    // –ü–µ—Ä–µ–ø–∏—Å–∞–ª –º–µ—Ç–æ–¥, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É –≤—ã–∑—ã–≤–∞—Ç—å —Å –ø–æ–º–æ—à—å—é await
    public func extractText(from fileURL: URL, fileName: String? = nil) async {
        let result = await extractTextAsync(from: fileURL, fileName: fileName)
        print("üìÑ TextExtractionService: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: \(result)")
    }
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    /// - Parameters:
    ///   - fileURL: URL —Ñ–∞–π–ª–∞
    ///   - fileName: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ URL)
    /// - Returns: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    public func extractTextAsync(from fileURL: URL, fileName: String? = nil) async -> ExtractionResult {
        let name = fileName ?? fileURL.lastPathComponent
        let fileExtension = fileURL.pathExtension.lowercased()
        
        print("üìÑ TextExtractionService: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ \(name) (—Ç–∏–ø: \(fileExtension))")
        
        // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        switch fileExtension {
            case "pdf":
                return await processPDF(fileURL: fileURL)
                
            case "txt", "md", "swift", "py", "js", "html", "css", "json":
                return await processPlainText(fileURL: fileURL)
                
            case "rtf":
                return await processRTF(fileURL: fileURL)
                
            case "doc", "docx":
                return await processDOCX(fileURL: fileURL)
                
            case "jpg", "jpeg", "png", "tiff", "tif", "gif", "bmp", "heic":
                return await processImage(fileURL: fileURL)
                
            default:
                return ExtractionResult(
                    text: nil,
                    method: "Unsupported",
                    error: NSError(
                        domain: "TextExtractionService",
                        code: 1,
                        userInfo: [NSLocalizedDescriptionKey: "–¢–∏–ø —Ñ–∞–π–ª–∞ \(fileExtension) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"]
                    )
                )
        }
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF-—Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç OCR
    func processPDF(fileURL: URL) async -> ExtractionResult {
        guard let pdfDocument = PDFDocument(url: fileURL) else {
            return ExtractionResult(
                text: nil,
                method: "PDFKit",
                error: NSError(
                    domain: "TextExtractionService",
                    code: 2,
                    userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç"]
                )
            )
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é PDFKit
        var fullText = ""
        for i in 0..<pdfDocument.pageCount {
            if let page = pdfDocument.page(at: i), let pageText = page.string {
                fullText += pageText + "\n" // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç
        if !fullText.isEmpty {
            return ExtractionResult(
                text: fullText.trimmingCharacters(in: .whitespacesAndNewlines),
                method: "PDFKit",
                error: nil
            )
        } else {
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è –Ω–µ—Ç, –ø—Ä–∏–º–µ–Ω—è–µ–º OCR –ø—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            if settings.autoApplyOCR {
                print("üìù TextExtractionService: PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è, –ø—Ä–∏–º–µ–Ω—è–µ–º OCR")
                return await processWithOCR(fileURL: fileURL)
            } else {
                print("‚ö†Ô∏è TextExtractionService: PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è, OCR –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return ExtractionResult(
                    text: nil,
                    method: "OCR –æ—Ç–∫–ª—é—á–µ–Ω",
                    error: NSError(
                        domain: "TextExtractionService",
                        code: 3,
                        userInfo: [NSLocalizedDescriptionKey: "OCR –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"]
                    )
                )
            }
        }
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    func processPlainText(fileURL: URL) async -> ExtractionResult {
        do {
            let text = try String(contentsOf: fileURL, encoding: .utf8)
            return ExtractionResult(
                text: text,
                method: "PlainText",
                error: nil
            )
        } catch {
            print("‚ö†Ô∏è TextExtractionService: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: \(error)")
            return ExtractionResult(
                text: nil,
                method: "PlainText",
                error: error
            )
        }
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RTF-—Ñ–∞–π–ª
    func processRTF(fileURL: URL) async -> ExtractionResult {
        do {
            let text = try extractTextFromRTF(fileURL: fileURL)
            return ExtractionResult(
                text: text,
                method: "NSAttributedString",
                error: nil
            )
        } catch {
            print("‚ö†Ô∏è TextExtractionService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ RTF —Ñ–∞–π–ª–∞: \(error)")
            return ExtractionResult(
                text: nil,
                method: "NSAttributedString",
                error: error
            )
        }
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ RTF —Ñ–∞–π–ª–∞
    func extractTextFromRTF(fileURL: URL) throws -> String {
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        let rtfData = try Data(contentsOf: fileURL)
        
        // –°–æ–∑–¥–∞–µ–º NSAttributedString –∏–∑ RTF –¥–∞–Ω–Ω—ã—Ö
        if let attributedString = try? NSAttributedString(
            data: rtfData,
            options: [.documentType: NSAttributedString.DocumentType.rtf],
            documentAttributes: nil
        ) {
            // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return attributedString.string
        } else {
            throw NSError(domain: "RTFExtraction", code: 1, userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å RTF –≤ —Ç–µ–∫—Å—Ç"])
        }
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DOC/DOCX —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é textutil
    func processDOCX(fileURL: URL) async -> ExtractionResult {
        do {
            let text = try await readDocxUsingTextUtil(filePath: fileURL.path)
            return ExtractionResult(
                text: text,
                method: "textutil",
                error: nil
            )
        } catch {
            print("‚ö†Ô∏è TextExtractionService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DOCX —Ñ–∞–π–ª–∞: \(error)")
            return ExtractionResult(
                text: nil,
                method: "textutil",
                error: error
            )
        }
    }
    
    /// –ß—Ç–µ–Ω–∏–µ DOC/DOCX —Å –ø–æ–º–æ—â—å—é textutil
    func readDocxUsingTextUtil(filePath: String) async throws -> String {
        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/textutil")
        process.arguments = ["-convert", "txt", "-encoding", "UTF-8", filePath, "-stdout"]
        
        let outputPipe = Pipe()
        let errorPipe = Pipe()
        process.standardOutput = outputPipe
        process.standardError = errorPipe
        
        do {
            try process.run()
            process.waitUntilExit()
        } catch {
            throw NSError(domain: "ProcessError", code: 0,
                          userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å textutil: \(error.localizedDescription)"])
        }
        
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–π–ø–æ–≤ –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        let outputData = try? outputPipe.fileHandleForReading.readToEnd()
        let errorData = try? errorPipe.fileHandleForReading.readToEnd()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if process.terminationStatus != 0 {
            let errorString = String(data: errorData ?? Data(), encoding: .utf8) ?? "Unknown textutil error"
            throw NSError(domain: "TextUtilError", code: Int(process.terminationStatus),
                          userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ textutil: \(errorString)"])
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
        guard let validOutputData = outputData, !validOutputData.isEmpty else {
            return "" // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
        }
        
        guard let outputString = String(data: validOutputData, encoding: .utf8) else {
            throw NSError(domain: "TextUtilError", code: -1,
                          userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã textutil"])
        }
        
        return outputString
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OCR
    func processImage(fileURL: URL) async -> ExtractionResult {
        if settings.autoApplyOCR {
            print("üìù TextExtractionService: –ü—Ä–∏–º–µ–Ω—è–µ–º OCR –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è \(fileURL.lastPathComponent)")
            return await processWithOCR(fileURL: fileURL)
        } else {
            print("‚ö†Ô∏è TextExtractionService: OCR –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return ExtractionResult(
                text: nil,
                method: "OCR –æ—Ç–∫–ª—é—á–µ–Ω",
                error: NSError(
                    domain: "TextExtractionService",
                    code: 3,
                    userInfo: [NSLocalizedDescriptionKey: "OCR –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"]
                )
            )
        }
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç OCR –∫ —Ñ–∞–π–ª—É (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ PDF –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è)
    func processWithOCR(fileURL: URL) async -> ExtractionResult {
        if let extractedText = await MistralAPIManager.shared.extractTextUsingMistralOCR(filePath: fileURL.path) {
            print("‚úÖ TextExtractionService: OCR —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ \(fileURL.lastPathComponent)")
            return ExtractionResult(
                text: extractedText,
                method: "Mistral OCR",
                error: nil
            )
        } else {
            print("‚ùå TextExtractionService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ OCR –∫ \(fileURL.lastPathComponent)")
            return ExtractionResult(
                text: nil,
                method: "Mistral OCR",
                error: NSError(
                    domain: "TextExtractionService",
                    code: 4,
                    userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ OCR"]
                )
            )
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à-—Ñ–∞–π–ª —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    /// - Parameters:
    ///   - data: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ///   - fileItem: –§–∞–π–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
    ///   - method: –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    /// - Returns: URL —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫—ç—à-—Ñ–∞–π–ª–∞ –∏–ª–∏ nil –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    public func saveCache(text: String, for fileItem: FileItem, extractionMethod: String) async -> URL? {
        // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        let dataToCache = ExtractedData(
            extractedText: text,
            originalFileModificationDate: fileItem.modificationDate,
            originalFilePath: fileItem.path.path,
            extractionMethod: extractionMethod
        )
        
        // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä—ã—Ç–æ–º—É –∫—ç—à-—Ñ–∞–π–ª—É
        let hiddenFileName = "." + fileItem.name + ".json"
        let hiddenPath = fileItem.path.deletingLastPathComponent().appendingPathComponent(hiddenFileName)
        
        // 3. –ö–æ–¥–∏—Ä—É–µ–º –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        do {
            let encoder = JSONEncoder()
            encoder.dateEncodingStrategy = .iso8601
            encoder.outputFormatting = .prettyPrinted
            let jsonData = try encoder.encode(dataToCache)
            try jsonData.write(to: hiddenPath)
            print("‚úÖ TextExtractionService: –ö—ç—à —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: \(hiddenPath.path)")
            return hiddenPath
        } catch {
            print("‚ùå TextExtractionService: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è \(fileItem.name): \(error)")
            return nil
        }
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –≤ –∫—ç—à
    /// - Parameters:
    ///   - fileItem: –§–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    ///   - completion: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ URL –∫—ç—à-—Ñ–∞–π–ª–∞
//    func extractAndCacheData(for fileItem: FileItem, completion: @escaping (ExtractionResult, URL?) -> Void) {
//        Task {
//            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
//            let result = await extractTextAsync(from: fileItem.path)
//            
//            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –ò –Ω–µ –ø—É—Å—Ç–æ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
//            var cacheURL: URL? = nil
//            if let text = result.text, !text.isEmpty {
//                cacheURL = await saveCache(text: text, for: fileItem, extractionMethod: result.method)
//                
//                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫—ç—à
//                await MainActor.run {
//                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
//                    NotificationCenter.default.post(
//                        name: Notification.Name("RefreshFiles"),
//                        object: nil
//                    )
//                }
//            } else {
//                print("‚ùó TextExtractionService: –¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∫—ç—à-—Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
//            }
//            
//            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
//            await MainActor.run {
//                completion(result, cacheURL)
//            }
//        }
//    }
    // –ò–∑–º–µ–Ω–∏–ª –º–µ—Ç–æ–¥, –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ await
    public func extractAndCacheData(for fileItem: FileItem) async -> (ExtractionResult, URL?) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        let result = await extractTextAsync(from: fileItem.path)
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –ò –Ω–µ –ø—É—Å—Ç–æ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        var cacheURL: URL? = nil
        if let text = result.text, !text.isEmpty {
            cacheURL = await saveCache(text: text, for: fileItem, extractionMethod: result.method)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫—ç—à
            await MainActor.run {
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
                NotificationCenter.default.post(
                    name: Notification.Name("RefreshFiles"),
                    object: nil
                )
            }
        } else {
            print("‚ùó TextExtractionService: –¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∫—ç—à-—Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
        }
        
        return (result, cacheURL)
    }
    
    
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à-—Ñ–∞–π–ª–∞
    /// - Parameter fileItem: –§–∞–π–ª, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    /// - Returns: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ nil –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    public func loadCachedData(for fileItem: FileItem) async -> ExtractedData? {
        guard !fileItem.isDirectory, fileItem.hasExtractedData else {
            return nil
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∫—ç—à-—Ñ–∞–π–ª—É
        let hiddenFileName = "." + fileItem.name + ".json"
        let hiddenPath = fileItem.path.deletingLastPathComponent().appendingPathComponent(hiddenFileName)
        
        do {
            // –ß–∏—Ç–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
            let jsonData = try Data(contentsOf: hiddenPath)
            let decoder = JSONDecoder()
            decoder.dateDecodingStrategy = .iso8601
            let decodedData = try decoder.decode(ExtractedData.self, from: jsonData)
            return decodedData
        } catch {
            print("‚ùå TextExtractionService: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è \(fileItem.name): \(error)")
            return nil
        }
    }
}
